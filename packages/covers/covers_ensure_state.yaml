input_datetime:
  dg_markisen_needed_at_night_sunrise:
    has_time: true
  dg_markisen_needed_at_night_sunset:
    has_time: true

binary_sensor:
  - platform: template
    sensors:
      dg_markisen_needed_at_night:
        value_template: >-
          {{ as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%H:%M:%S') <= states('input_datetime.dg_markisen_needed_at_night_sunrise')
          or as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%H:%M:%S') >= states('input_datetime.dg_markisen_needed_at_night_sunset') }}
        icon_template: "mdi:window-shutter{{ '' if is_state('binary_sensor.dg_markisen_needed_at_night','on') else '-open' }}"

script:
  coversatnight_covers_down:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_down" }
  coversatnight_covers_down_eg:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_down", "level": "eg" }
  coversatnight_covers_down_og:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_down", "level": "og" }
  coversatnight_covers_down_dg:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_down", "level": "dg" }
  coversatnight_covers_down_simulation:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_down-simulation" }
  coversatnight_covers_up:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_up" }
  coversatnight_covers_up_eg:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_up", "level": "eg" }
  coversatnight_covers_up_og:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_up", "level": "og" }
  coversatnight_covers_up_dg:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_up", "level": "dg" }
  coversatnight_covers_up_simulation:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "covers_up-simulation" }


homeassistant:
  customize:
    input_datetime.dg_markisen_needed_at_night_sunrise:
      friendly_name: wenn Sonnenaufgang vor
    input_datetime.dg_markisen_needed_at_night_sunset:
      friendly_name: wenn Sonnenuntergang nach
    binary_sensor.dg_markisen_needed_at_night:
      friendly_name: Au√üenmarkisen DG nachts runter
    script.coversatnight_covers_up:
      friendly_name: Raffstore jetzt hoch (alle)
    script.coversatnight_covers_up_eg:
      friendly_name: Raffstore jetzt hoch (nur EG)
    script.coversatnight_covers_up_og:
      friendly_name: Raffstore jetzt hoch (nur OG)
    script.coversatnight_covers_up_dg:
      friendly_name: Raffstore jetzt hoch (nur DG)
    script.coversatnight_covers_up_simulation:
      friendly_name: Raffstore jetzt hoch (Simulation)
    script.coversatnight_covers_down:
      friendly_name: Raffstore jetzt runter (alle)
    script.coversatnight_covers_down_eg:
      friendly_name: Raffstore jetzt runter (nur EG)
    script.coversatnight_covers_down_og:
      friendly_name: Raffstore jetzt runter (nur OG)
    script.coversatnight_covers_down_dg:
      friendly_name: Raffstore jetzt runter (nur DG)
    script.coversatnight_covers_down_simulation:
      friendly_name: Raffstore jetzt runter (Simulation)
  customize_glob:
    "script.coversatnight_covers_*":
      icon: mdi:home-automation
      can_cancel: false
