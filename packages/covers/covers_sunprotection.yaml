input_number:
  sunprot_temp_0:         { min: -5, max:  40, step: 1, unit_of_measurement: "°C" } # initial:  15
  sunprot_klx_0:          { min:  0, max: 100, step: 5, unit_of_measurement: klx }  # initial: 100
  sunprot_temp_1:         { min: -5, max:  40, step: 1, unit_of_measurement: "°C" } # initial:  18
  sunprot_klx_1:          { min:  0, max: 100, step: 5, unit_of_measurement: klx }  # initial:  80
  sunprot_temp_2:         { min: -5, max:  40, step: 1, unit_of_measurement: "°C" } # initial:  35
  sunprot_klx_2:          { min:  0, max: 100, step: 5, unit_of_measurement: klx }  # initial:  50
  sunprot_klx_off_factor: { min: 50, max:  90, step: 5, unit_of_measurement: "%" }  # initial:  80
  sunprot_delay_on:       { min:  0, max:  60, step: 5, unit_of_measurement: Min }  # initial:  10
  sunprot_delay_off:      { min:  0, max:  60, step: 5, unit_of_measurement: Min }  # initial:  20
  sunprot_wiga_temp_0:    { min: 15, max:  35, step: 1, unit_of_measurement: "°C" } # initial:  22
  sunprot_wiga_klx_0:     { min:  0, max: 100, step: 5, unit_of_measurement: klx }  # initial: 100
  sunprot_wiga_temp_1:    { min: 15, max:  35, step: 1, unit_of_measurement: "°C" } # initial:  28
  sunprot_wiga_klx_1:     { min:  0, max: 100, step: 5, unit_of_measurement: klx }  # initial:  40

sensor:
  - platform: statistics
    name: wettersensor_sun_east
    entity_id: sensor.wettersensor_sun_east
    max_age: { minutes: 15 }
  - platform: statistics
    name: wettersensor_sun_south
    entity_id: sensor.wettersensor_sun_south
    max_age: { minutes: 15 }
  - platform: statistics
    name: wettersensor_sun_west
    entity_id: sensor.wettersensor_sun_west
    max_age: { minutes: 15 }
  - platform: template
    sensors:
      sunprot_outside_temp_ref:
        value_template: "{{ states('sensor.wettersensor_temperature') | float }}"
        unit_of_measurement: "°C"
      sunprot_klx_limit_current:
        value_template: >
          {%- set vars = {
            "temp": states('sensor.sunprot_outside_temp_ref') | float,
            "temp_0": states.input_number.sunprot_temp_0.state | int,
            "klx_0": states.input_number.sunprot_klx_0.state | int,
            "temp_1": states.input_number.sunprot_temp_1.state | int,
            "klx_1": states.input_number.sunprot_klx_1.state | int,
            "temp_2": states.input_number.sunprot_temp_2.state | int,
            "klx_2": states.input_number.sunprot_klx_2.state | int,
          } -%}
          {%- if vars.temp < vars.temp_0 -%}
            {{ vars.klx_0 }}
          {%- elif vars.temp < vars.temp_1 -%}
            {{ (vars.klx_0 + (vars.temp - vars.temp_0) * (vars.klx_0 - vars.klx_1) / (vars.temp_0 - vars.temp_1)) | round(0) }}
          {%- elif vars.temp < vars.temp_2 -%}
            {{ (vars.klx_1 + (vars.temp - vars.temp_1) * (vars.klx_1 - vars.klx_2) / (vars.temp_1 - vars.temp_2)) | round(0) }}
          {%- else -%}
            {{ vars.klx_2 }}
          {%- endif -%}
        unit_of_measurement: klx
      sunprot_klx_limit_current_off:
        value_template: "{{ (states('sensor.sunprot_klx_limit_current') | int * states.input_number.sunprot_klx_off_factor.state | int / 100) | round(0) }}"
        unit_of_measurement: klx
      sunprot_sun_east_above_on_limit:
        value_template: "{{ states('sensor.wettersensor_sun_east') | int > states('sensor.sunprot_klx_limit_current') | int }}"
      sunprot_sun_east_below_off_limit:
        value_template: "{{ states('sensor.wettersensor_sun_east') | int < states('sensor.sunprot_klx_limit_current_off') | int }}"
      sunprot_sun_south_above_on_limit:
        value_template: "{{ states('sensor.wettersensor_sun_south') | int > states('sensor.sunprot_klx_limit_current') | int }}"
      sunprot_sun_south_below_off_limit:
        value_template: "{{ states('sensor.wettersensor_sun_south') | int < states('sensor.sunprot_klx_limit_current_off') | int }}"
      sunprot_sun_west_above_on_limit:
        value_template: "{{ states('sensor.wettersensor_sun_west') | int > states('sensor.sunprot_klx_limit_current') | int }}"
      sunprot_sun_west_below_off_limit:
        value_template: "{{ states('sensor.wettersensor_sun_west') | int < states('sensor.sunprot_klx_limit_current_off') | int }}"
      sunprot_wiga_inside_temp_ref:
        value_template: "{{ states('sensor.aqara_thp_wiga_temperature') | float }}"
        unit_of_measurement: "°C"
      sunprot_wiga_klx_limit_current:
        value_template: >
          {%- set vars = {
            "temp": states('sensor.sunprot_wiga_inside_temp_ref') | float,
            "klx_0": states.input_number.sunprot_wiga_klx_0.state | int,
            "temp_0": states.input_number.sunprot_wiga_temp_0.state | int,
            "klx_1": states.input_number.sunprot_wiga_klx_1.state | int,
            "temp_1": states.input_number.sunprot_wiga_temp_1.state | int,
          } -%}
          {%- if vars.temp < vars.temp_0 -%}
            {{ vars.klx_0 }}
          {%- elif vars.temp < vars.temp_1 -%}
            {{ (vars.klx_0 + (vars.temp - vars.temp_0) * (vars.klx_0 - vars.klx_1) / (vars.temp_0 - vars.temp_1)) | round(0) }}
          {%- else -%}
            {{ vars.klx_1 }}
          {%- endif -%}
        unit_of_measurement: klx
      sunprot_wiga_klx_limit_current_off:
        value_template: "{{ (states('sensor.sunprot_wiga_klx_limit_current') | int * states.input_number.sunprot_klx_off_factor.state | int / 100) | round(0) }}"
        unit_of_measurement: klx
      sunprot_wiga_sun_above_on_limit:
        value_template: "{{ states('sensor.wettersensor_sun_south') | int > states('sensor.sunprot_wiga_klx_limit_current') | int }}"
      sunprot_wiga_sun_below_off_limit:
        value_template: "{{ states('sensor.wettersensor_sun_south') | int < states('sensor.sunprot_wiga_klx_limit_current_off') | int }}"


input_boolean:
  sunprot_eastface_active:
    icon: mdi:weather-sunny
  sunprot_southface_active:
    icon: mdi:weather-sunny
  sunprot_westface_active:
    icon: mdi:weather-sunny
  sunprot_wiga_active:
    icon: mdi:weather-sunny


automation:

  - alias: sunprot_eastface_active_on
    trigger: { platform: state, entity_id: sensor.sunprot_sun_east_above_on_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_on') | int }}" } }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_eastface_active } }
  - alias: sunprot_eastface_active_off
    trigger: { platform: state, entity_id: sensor.sunprot_sun_east_below_off_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_off') | int }}" } }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_eastface_active } }

  - alias: sunprot_southface_active_on
    trigger: { platform: state, entity_id: sensor.sunprot_sun_south_above_on_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_on') | int }}" } }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_southface_active } }
  - alias: sunprot_southface_active_off
    trigger: { platform: state, entity_id: sensor.sunprot_sun_south_below_off_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_off') | int }}" } }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_southface_active } }

  - alias: sunprot_westface_active_on
    trigger: { platform: state, entity_id: sensor.sunprot_sun_west_above_on_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_on') | int }}" } }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_westface_active } }
  - alias: sunprot_westface_active_off
    trigger: { platform: state, entity_id: sensor.sunprot_sun_west_below_off_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_off') | int }}" } }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_westface_active } }

  - alias: sunprot_wiga_active_on
    trigger: { platform: state, entity_id: sensor.sunprot_wiga_sun_above_on_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_on') | int }}" } }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_wiga_active } }
  - alias: sunprot_wiga_active_off
    trigger: { platform: state, entity_id: sensor.sunprot_wiga_sun_below_off_limit, to: "True", for: { minutes: "{{ states('input_number.sunprot_delay_off') | int }}" } }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_wiga_active } }

  - alias: sunprot_off_before_sunset
    trigger:
      - { platform: sun, event: sunset, offset: "-01:00:00" }
    action:
      - { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_eastface_active } }
      - { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_southface_active } }
      - { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_westface_active } }
      - { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_wiga_active } }

  - alias: sunprot_update_covers
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_eastface_active }
      - { platform: state, entity_id: input_boolean.sunprot_southface_active }
      - { platform: state, entity_id: input_boolean.sunprot_westface_active }
      - { platform: state, entity_id: input_boolean.sunprot_wiga_active }
      - { platform: time_pattern, minutes: /15, seconds: 0 }
    condition:
      - { condition: sun, after: sunrise, after_offset: "02:00:00" }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset, before_offset: "-00:30:00" }
    action:
      - service: script.turn_on
        entity_id: script.sunprot_update_covers


script:

  sunprot_update_covers:
    sequence:
      - service: python_script.covers_ensure_state
        data: { "situation": "daytime" }


group:

  sunprot_automations:
    all: true
    entities:
      - automation.sunprot_eastface_active_on
      - automation.sunprot_eastface_active_off
      - automation.sunprot_southface_active_on
      - automation.sunprot_southface_active_off
      - automation.sunprot_westface_active_on
      - automation.sunprot_westface_active_off
      - automation.sunprot_wiga_active_on
      - automation.sunprot_wiga_active_off
      - automation.sunprot_off_before_sunset
      - automation.sunprot_update_covers


homeassistant:

  customize:

    group.sunprot_automations:
      friendly_name: Sonnenschutz autom.
      icon: mdi:home-automation

    input_boolean.sunprot_eastface_active:
      friendly_name: Sonnenschutz nötig Ostseite
    automation.sunprot_eastface_active_on:
      friendly_name: Sonnenschutz nötig Ostseite einschalten
    automation.sunprot_eastface_active_off:
      friendly_name: Sonnenschutz nötig Ostseite ausschalten

    input_boolean.sunprot_southface_active:
      friendly_name: Sonnenschutz nötig Südseite
    automation.sunprot_southface_active_on:
      friendly_name: Sonnenschutz nötig Südseite einschalten
    automation.sunprot_southface_active_off:
      friendly_name: Sonnenschutz nötig Südseite ausschalten

    input_boolean.sunprot_westface_active:
      friendly_name: Sonnenschutz nötig Westseite
    automation.sunprot_westface_active_on:
      friendly_name: Sonnenschutz nötig Westseite einschalten
    automation.sunprot_westface_active_off:
      friendly_name: Sonnenschutz nötig Westseite ausschalten

    automation.sunprot_update_covers:
      friendly_name: Beschattung jetzt aktualisieren
    script.sunprot_update_covers:
      friendly_name: Beschattung jetzt aktualisieren
      icon: mdi:home-automation
      can_cancel: false
