input_boolean:

  sunprot_eastface_active:
    icon: mdi:weather-sunny

  sunprot_southface_active:
    icon: mdi:weather-sunny

  sunprot_westface_active:
    icon: mdi:weather-sunny


sensor:

  - platform: template
    sensors:
      sunprot_eastface_radlevel_current:
        # dummy add wettersensor_reading_age to make sure we get new states every minute for the statistics sensor even value is always truncated at 99 klx
        value_template: "{{ states('sensor.wettersensor_sun_east') | int + states('sensor.wettersensor_reading_age') | int % 1000 / 1000 }}"
        unit_of_measurement: "%"
  - platform: statistics
    name: sunprot_eastface_radlevel_temp
    entity_id: sensor.sunprot_eastface_radlevel_current
    sampling_size: 60
    max_age: { minutes: 30 }
  - platform: template
    sensors:
      sunprot_eastface_radlevel_mean:
        # just strip off statistics sensor attributes to save database space and performance
        value_template: "{{ states('sensor.sunprot_eastface_radlevel_temp_mean') }}"
        unit_of_measurement: "%"

  - platform: template
    sensors:
      sunprot_southface_radlevel_current:
        # dummy add wettersensor_reading_age to make sure we get new states every minute for the statistics sensor even value is always truncated at 99 klx
        value_template: "{{ states('sensor.wettersensor_sun_south') | int + states('sensor.wettersensor_reading_age') | int % 1000 / 1000 }}"
        unit_of_measurement: "%"
  - platform: statistics
    name: sunprot_southface_radlevel_temp
    entity_id: sensor.sunprot_southface_radlevel_current
    sampling_size: 60
    max_age: { minutes: 30 }
  - platform: template
    sensors:
      sunprot_southface_radlevel_mean:
        # just strip off statistics sensor attributes to save database space and performance
        value_template: "{{ states('sensor.sunprot_southface_radlevel_temp_mean') }}"
        unit_of_measurement: "%"

  - platform: template
    sensors:
      sunprot_westface_radlevel_current:
        # dummy add wettersensor_reading_age to make sure we get new states every minute for the statistics sensor even value is always truncated at 99 klx
        value_template: "{{ states('sensor.wettersensor_sun_west') | int + states('sensor.wettersensor_reading_age') | int % 1000 / 1000 }}"
        unit_of_measurement: "%"
  - platform: statistics
    name: sunprot_westface_radlevel_temp
    entity_id: sensor.sunprot_westface_radlevel_current
    sampling_size: 60
    max_age: { minutes: 30 }
  - platform: template
    sensors:
      sunprot_westface_radlevel_mean:
        # just strip off statistics sensor attributes to save database space and performance
        value_template: "{{ states('sensor.sunprot_westface_radlevel_temp_mean') }}"
        unit_of_measurement: "%"


automation:

  - alias: sunprot_eastface_active_on
    trigger: { platform: numeric_state, entity_id: sensor.sunprot_eastface_radlevel_mean, above: 80 }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_eastface_active } }
  - alias: sunprot_eastface_active_off
    trigger: { platform: numeric_state, entity_id: sensor.sunprot_eastface_radlevel_mean, below: 60 }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_eastface_active } }

  - alias: sunprot_southface_active_on
    trigger: { platform: numeric_state, entity_id: sensor.sunprot_southface_radlevel_mean, above: 80 }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_southface_active } }
  - alias: sunprot_southface_active_off
    trigger: { platform: numeric_state, entity_id: sensor.sunprot_southface_radlevel_mean, below: 60 }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_southface_active } }

  - alias: sunprot_westface_active_on
    trigger: { platform: numeric_state, entity_id: sensor.sunprot_westface_radlevel_mean, above: 80 }
    action: { service: input_boolean.turn_on, data: { entity_id: input_boolean.sunprot_westface_active } }
  - alias: sunprot_westface_active_off
    trigger: { platform: numeric_state, entity_id: sensor.sunprot_westface_radlevel_mean, below: 60 }
    action: { service: input_boolean.turn_off, data: { entity_id: input_boolean.sunprot_westface_active } }

  - alias: sunprot_eastface_turn_on
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_eastface_active, to: 'on' }
      - { platform: time, minutes: /15, seconds: 0 }
    condition:
      - { condition: state, entity_id: input_boolean.sunprot_eastface_active, state: 'on' }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset }
    action:
      - service: python_script.covers_ensure_state
        data: { "face": "east", "target_state": "sunscreen" }
  - alias: sunprot_eastface_turn_off
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_eastface_active, to: 'off' }
      - { platform: time, minutes: /15, seconds: 0 }
    condition:
      - { condition: state, entity_id: input_boolean.sunprot_eastface_active, state: 'off' }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset }
    action:
      - service: python_script.covers_ensure_state
        data: { "face": "east", "target_state": "no-sunscreen" }

  - alias: sunprot_southface_turn_on
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_southface_active, to: 'on' }
      - { platform: time, minutes: /15, seconds: 0 }
    condition:
      - { condition: state, entity_id: input_boolean.sunprot_southface_active, state: 'on' }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset }
    action:
      - service: python_script.covers_ensure_state
        data: { "face": "south", "target_state": "sunscreen" }
  - alias: sunprot_southface_turn_off
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_southface_active, to: 'off' }
      - { platform: time, minutes: /15, seconds: 0 }
    condition:
      - { condition: state, entity_id: input_boolean.sunprot_southface_active, state: 'off' }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset }
    action:
      - service: python_script.covers_ensure_state
        data: { "face": "south", "target_state": "no-sunscreen" }

  - alias: sunprot_westface_turn_on
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_westface_active, to: 'on' }
      - { platform: time, minutes: /15, seconds: 0 }
    condition:
      - { condition: state, entity_id: input_boolean.sunprot_westface_active, state: 'on' }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset }
    action:
      - service: python_script.covers_ensure_state
        data: { "face": "west", "target_state": "sunscreen" }
  - alias: sunprot_westface_turn_off
    trigger:
      - { platform: state, entity_id: input_boolean.sunprot_westface_active, to: 'off' }
      - { platform: time, minutes: /15, seconds: 0 }
    condition:
      - { condition: state, entity_id: input_boolean.sunprot_westface_active, state: 'off' }
      - { condition: time, after: '08:00:00' }
      - { condition: sun, before: sunset }
    action:
      - service: python_script.covers_ensure_state
        data: { "face": "west", "target_state": "no-sunscreen" }


group:

  covers_sunprotection:
    name: Sonnenschutz
    entities:
      - sensor.wettersensor_temperature
      - sensor.wettersensor_sun_east
      - sensor.wettersensor_sun_south
      - sensor.wettersensor_sun_west
      - sensor.sunprot_eastface_radlevel_current
      - sensor.sunprot_eastface_radlevel_mean
      - input_boolean.sunprot_eastface_active
      - sensor.sunprot_southface_radlevel_current
      - sensor.sunprot_southface_radlevel_mean
      - input_boolean.sunprot_southface_active
      - sensor.sunprot_westface_radlevel_current
      - sensor.sunprot_westface_radlevel_mean
      - input_boolean.sunprot_westface_active


history_graph:

  sonnenschutz:
    name: Sonnenschutz
    entities:
      - sensor.wettersensor_temperature
      - sensor.wettersensor_sun_east
      - sensor.sunprot_eastface_radlevel_current
      - sensor.sunprot_eastface_radlevel_mean
      - input_boolean.sunprot_eastface_active
      - sensor.wettersensor_sun_south
      - sensor.sunprot_southface_radlevel_current
      - sensor.sunprot_southface_radlevel_mean
      - input_boolean.sunprot_southface_active
      - sensor.wettersensor_sun_west
      - sensor.sunprot_westface_radlevel_current
      - sensor.sunprot_westface_radlevel_mean
      - input_boolean.sunprot_westface_active
    hours_to_show: 72
    refresh: 60


homeassistant:

  customize:

    input_boolean.sunprot_eastface_active:
      friendly_name: Sonnenschutz nötig Ostseite
    automation.sunprot_eastface_active_on:
      friendly_name: Sonnenschutz nötig Ostseite einschalten
    automation.sunprot_eastface_active_off:
      friendly_name: Sonnenschutz nötig Ostseite ausschalten
    automation.sunprot_eastface_turn_on:
      friendly_name: Beschattung Ostseite in Sonnenschutz-Position
    automation.sunprot_eastface_turn_off:
      friendly_name: Beschattung Ostseite in normale Position

    input_boolean.sunprot_southface_active:
      friendly_name: Sonnenschutz nötig Südseite
    automation.sunprot_southface_active_on:
      friendly_name: Sonnenschutz nötig Südseite einschalten
    automation.sunprot_southface_active_off:
      friendly_name: Sonnenschutz nötig Südseite ausschalten
    automation.sunprot_southface_turn_on:
      friendly_name: Beschattung Südseite in Sonnenschutz-Position
    automation.sunprot_southface_turn_off:
      friendly_name: Beschattung Südseite in normale Position

    input_boolean.sunprot_westface_active:
      friendly_name: Sonnenschutz nötig Westseite
    automation.sunprot_westface_active_on:
      friendly_name: Sonnenschutz nötig Westseite einschalten
    automation.sunprot_westface_active_off:
      friendly_name: Sonnenschutz nötig Westseite ausschalten
    automation.sunprot_westface_turn_on:
      friendly_name: Beschattung Westseite in Sonnenschutz-Position
    automation.sunprot_westface_turn_off:
      friendly_name: Beschattung Westseite in normale Position
